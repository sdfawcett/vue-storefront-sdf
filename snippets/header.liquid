<header class="header" id="header">
    <div class="header-inner flex space-between">

        
        {% unless template == "product" %}
        <button class="menu-button" @click="toggleMenu">
            <svg class="menu-arrow-icon">{% render 'header-arrow' %}</svg>
            <span>Menu</span>
        </button>
        {% else %}
        <a href="javascript:history.back()" class="menu-button">
            <svg class="menu-arrow-icon" style="transform: none;">{% render 'header-arrow' %}</svg>
            <span>Back</span>
        </a>
        {% endunless %}
        

        
        <a href="/" class="header-title" itemprop="url">
            <img src="{{ "bomb-botanicals-logo-4.png" | asset_url }}" alt="{{ shop.name }}" itemprop="logo">
        </a>

        <div class="cart-button-container" @click="toggleMiniCart">
            <button class="cart-button">
                <span>
                    <template v-if="cart">
                        Cart (${cart.item_count})
                    </template>
                    
                </span>
                <svg class="cart-arrow-icon">{% render 'header-arrow' %}</svg>
            </button>
        </div>
    </div>

    <div class="header-mobile">
        <a href="/" class="header-title" itemprop="url">
            <img src="{{ "bomb-botanicals-logo-4.png" | asset_url }}" alt="{{ shop.name }}" itemprop="logo">
        </a>
        <div class="mobile-nav">
            <div>
                <button class="mobile-nav-button" @click="toggleMenu">
                    <svg id="hamburger" viewBox="0 0 100 80" width="30" height="30">
                        <rect width="100" height="20"></rect>
                        <rect y="30" width="100" height="20"></rect>
                        <rect y="60" width="100" height="20"></rect>
                    </svg>
                </button>   
            </div>
            <div>
                <button class="mobile-nav-button" @click="toggleMiniCart">
                    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                        width="30px" height="30px" viewBox="0 0 40 36" style="enable-background:new 0 0 40 36;" xml:space="preserve">
                    <g id="Page-1_4_" sketch:type="MSPage">
                        <g id="Desktop_4_" transform="translate(-84.000000, -410.000000)" sketch:type="MSArtboardGroup">
                            <path id="cart-icon" sketch:type="MSShapeGroup" class="st0" d="M94.5,434.6h24.8l4.7-15.7H92.2l-1.3-8.9H84v4.8h3.1l3.7,27.8h0.1
                                c0,1.9,1.8,3.4,3.9,3.4c2.2,0,3.9-1.5,3.9-3.4h12.8c0,1.9,1.8,3.4,3.9,3.4c2.2,0,3.9-1.5,3.9-3.4h1.7v-3.9l-25.8-0.1L94.5,434.6"
                                />
                        </g>
                    </g>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <div class="menu-drawer" :class="{ hidden: menuDrawer }">
        {% render 'menu-drawer' %}
    </div>

    <div class="mini-cart" :class="{ hidden:miniCart }">
        <button class="mini-cart-close-button" @click="toggleMiniCart">Close</button>
        {% render 'mini-cart' %}
    </div>
    <div class="outside" v-if="!miniCart || !menuDrawer" @click="closeAllDrawers"></div>
</header>

<script>

console.log(store.state.cartState);

if (document.querySelector('#header')) {
    const headerCart = Vue.createApp({
        delimiters: ['${', '}'], 
        data() {
            return {
                cartData: store.state.cartState
            }
        },

        methods: {
            toggleMiniCart() {
                toggleMiniCart.openCart()
            },
            toggleMenu() {
                toggleMenu.openMenu()
            },
            closeAllDrawers() {
                toggleClose.closeAll()
            },
            decrement(item) {
                const data = {
                    "id": item.key,
                    "quantity": item.quantity - 1
                }

                axios.post('/cart/change.js', data)
                    .then(response => {
                        store.getCart()
                    })
                    .catch(error => console.log(error))
            },
            increment(item){
                const data = {
                    "id": item.key,
                    "quantity": item.quantity + 1
                }

                axios.post('/cart/change.js', data)
                    .then(response => {
                        store.getCart()
                    })
                    .catch(error => console.log(error))
            },
            money(value) {
                if (!value) return 0
                return "$" + (value/100).toFixed(2)
            }
        },
        computed: {
            miniCart() {
                return miniCartState.hidden
            },
            menuDrawer() {
                return menuState.hidden
            },
            cart() {
                return this.cartData[0]
            }
        },
        created() {
            store.getCart()
        }
    }).mount('#header')
}

</script>